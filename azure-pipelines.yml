trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  rid32: 'win-x86'
  rid64: 'win-x64'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    version: 5.0.x
    performMultiLevelLookup: true

- task: DotNetCoreCLI@2
  displayName: 'Build 32-bit'
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) -r $(rid32)'

- task: DotNetCoreCLI@2
  displayName: 'Build 64-bit'
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) -r $(rid64)'

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: 'Test/**/*.csproj'
    arguments: '--configuration $(buildConfiguration) -r $(rid32)'

- task: PowerShell@2
  inputs:
    filePath: 'SetAppVerVariables.ps1'

- task: BatchScript@1
  inputs:
    filename: 'prepare_release.bat'
    arguments: '$(AppVer)'

# - task: ArchiveFiles@2
#   inputs:
#     rootFolderOrFile: 'RVis_v$(AppVer)'
#     includeRootFolder: true
#     archiveType: 'zip'
#     archiveFile: '$(Build.ArtifactStagingDirectory)/RVis_v$(AppVer).zip'
#     replaceExistingArchive: true

# - task: ArchiveFiles@2
#   inputs:
#     rootFolderOrFile: 'RVis_v$(AppVer)_x64'
#     includeRootFolder: true
#     archiveType: 'zip'
#     archiveFile: '$(Build.ArtifactStagingDirectory)/RVis_v$(AppVer)_x64.zip'
#     replaceExistingArchive: true

#- task: GitHubRelease@1
#  inputs:
#    gitHubConnection: 'GH-GMPtk-RVis'
#    repositoryName: '$(Build.Repository.Name)'
#    action: 'create'
#    target: '$(Build.SourceVersion)'
#    tagSource: 'userSpecifiedTag'
#    tag: 'v$(AppVer)'
#    title: 'RVis v$(AppVer)'
#    releaseNotesFilePath: 'release_notes.md'
#    assets: |
#      $(Build.ArtifactStagingDirectory)/RVis_v$(AppVer).zip
#      $(Build.ArtifactStagingDirectory)/RVis_v$(AppVer)_x64.zip
#    isPreRelease: true
#    addChangeLog: false
